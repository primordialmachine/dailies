# Types
*DDL* knows six basic types *List* and *Map*, which are the so called aggregate types,
and *Boolean*, *Number*, *String* and *Void*, which are the so called   scalar types.

## Scalar Types

### *Boolean* Type
The type *Boolean* has two values *true* and *false* which are expressed in the language by the literal `true` and `false`, respectively.

### *Number* Type
The type *Number* represents both 2-complement integer numbers as well as IEE754 floating-point numbers.
Remark: The *DDL* does not impose restrictions on the range and precision of values of type *Number* nor on the length of values of type *String*.

### *String* Type
The type *String* represents UTF-8 strings. The language knows single-quoted and double quoted strings.
Single quoted strings are opened and closed by the single quote `'` and double quoted strings are opened and closed by the double quote `"`.
To type a single quote in a single-quoted string, preceed it by a backslash.
To type a double quote in double-quoted string, preceed it by a backslash. 
A double backslash is interpreted as a single slash.

### *Void* Type
The type *Void* has a single value *void* which is represented in the language by the literal `void`.

## Aggregate Types

### *List* Type
The type *List* represents lists of values.
A *List* literal is opened by a left square bracket `[` and is closed by a right square bracket `]`.
The values are written between these brackets. Two consecutive values are separated by a comma `,` inbetween them. 
The last value can also be followed by a comma `,`.

**Example**
```
// A list with three numbers 1, 2, and 3.
[ 1, 2, 3 ]
```

### *Map* Type
The type *Map* represents maps from names to values.
A *Map* literal is opened by a left curly bracket `{` and is closed by a right curly bracket `}`.
name/value pairs are written between these brackets. Two consecutive name/value pairs are separated by a comma `,` inbetween them.
The last name/value pair can also be followed by a comma `,`.

A name/value pair consists of a name which is a literal of the form `(alphabetic|underscore)(alphabetic|underscore|digit)*`
followed by a colon followed by the value.


**Example**
```
// A map of
// text to 'Hello, World!'
// action to 'Print', and
// fontSize to 12.
{ text : 'Hello World!', action : 'Print', fontSize: 12 }
```

If two name/value pairs from the same name in a map are
specified, then last specified    name/value pair takes
precedence.

**Example**
The following *ADL* program defines a *Map* value that contains two name/value pairs with the same name `x`.
The first name/value pair maps to the value `0` and second name/value pair to the number `1`.
```
{ x : 0, x : 1 }
```
The effective *Map* value defined by the program is hence
```
{ x : 1 }
```
as name/value pair mapping to the value `0` is specified before the name/value pair mapping to the value `1`.
